集中式和分布式
集中式是有一个中央版本控制器，所有的电脑都要从中央控制器中取版本，改完了再放回图书馆，缺点是需要连网，如果网络较差就累了，svn
分布式是每一台电脑都有一个完整的版本库，没有中央控制器这一说，工作时需要联网，只有最后推送才需要, git

创建readme

创建仓库
	git init       初始git
	git add .      把文件添加到暂存区
	git commit     把文件添加到分支上
修改readme	
版本回退
	git status     会提示在哪个版本上，哪些文件有改动
	git diff file  会对这个文件进行比较，看有哪些变动，-红色表示原来的状态，+绿色表示修改后的状态
	
	git add .              看到改动后，确认要改动，则进行添加并提交
	git commit -m 'add distributed'
	提交后再git status就干净了，没有需要提交的了
	
	git log           查看版本改动的日志
	git log --pretty=oneline  简要查看日志，前面一部分是commit id，可以用作版本号
	HEAD表示当前版本 HEAD^前一个版本， HEAD^^前两个版本， HEAD~200前两个版本
	git reset --hard HEAD^   退到前一个版本
	如果想再回到最新的版本则需要那个版本的commit id,只需要前几位就行，后几位不行
	git reflog 得到commit id
	
	git diff 是工作区与暂存区的比较
	git diff --cached 暂存区与分支的比较
	
	如果不add到暂存区，就不会提交到分支
	git checkout .   
	git checkout -- file    放弃工作区中的修改
	如果文件已到暂存区了，那git checkout --file就没用了
	git reset HEAD file   先从暂存区回来再 git checkout -- file撤回
	
	删除文件，一般在文件管理器删掉，但git会发现你删掉了，这是变动，它会确认你是否要删git status
	git rm file
	git commit -m 'delete file'
	
	如果是误删，则要撤回用
	git checkout -- test.txt   放弃工作区对test.txt作的修改，实在不行就退版本
	只要提交到版本库中就不怕误删了
	
	git remote add origin git@github.com:m8k7j/learngit.git   关联远程仓库
	git push -u origin master         第一次推送，把当前master分支推送给远程
	git clone git@github.com:m8k7j/learngit.git      远程克隆到本地
	
	一般master用来发布，dev才是干活的分支，bug与feature可以各起分支
	git checkout -b dev           创建dev分支并转到dev分支下工作
	git branch          查看分支
	git checkout master  切换分支
	当分支上的内容比主支内容要新时，可以在主支上进行合并分支的操作
	git merge dev       合并指定分支到当前分支
	git branch -d dev    删除分支
	git鼓励用分支完成某个任务再合并到主支上
	
	
	分支与主支各有新的提交
	分支基于原主支进行的修改，并提交到版本库里
	原主支再进行修改，这个修改分支并不知情，此时合并分支会发生冲突
	到底以原主支后来的修改为准还是分支上的修改为准
	此时打开冲突的文件
	<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch 'feature1'
>>>>>>> feature1
	======隔开两个分支冲突的内容，手动修改
	
	pull 远程到本地， 本地落后，远程新
	push 本地到远程， 本地超前，远程落后
	
	git merge --no-ff -m 'merge dev' dev  分有合并分支信息git log
	
	bug分支管理
	git stash          暂时把工作存起来，以后恢复再继续做，工作区恢复到之前未修改过的状态修改bug
	在主分支上修改bug，需要在主分支上创建分支，这样内容就是主分支的内容
	git checkout master
	git checkout -b bug
	git stash list
	git stash pop  = git stash apply @{0}+ git stash drop
	
	feature分支，在feature分支上开发，合并到dev，
	如果在feature分支上开发了功能，准备合并到dev, 接到上级说不要这个分支了
	git branch -d feature-vulcan友情提醒并没有合并到dev
	真实删除 git branch -D feature-vulcan
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	